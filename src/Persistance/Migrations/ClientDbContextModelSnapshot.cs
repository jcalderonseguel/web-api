// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance;

namespace Persistance.Migrations
{
    [DbContext(typeof(ClientDbContext))]
    partial class ClientDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Person")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<string>("AddressLine")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("City")
                        .HasColumnType("int");

                    b.Property<string>("Coname")
                        .HasColumnName("COName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric(11, 8)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric(11, 8)");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PoboxPostalCode")
                        .HasColumnName("POBoxPostalCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("PostOfficeBoxCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("StatusCodeAddress")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Person", "AddressType", "ValidFrom")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AddressType");

                    b.HasIndex("City");

                    b.HasIndex("StatusCodeAddress");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Entities.AddressesTypes", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AddressTypeId");

                    b.ToTable("AddressesTypes");
                });

            modelBuilder.Entity("Domain.Entities.Attachments", b =>
                {
                    b.Property<Guid>("Person")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AttachmentType")
                        .HasColumnType("int");

                    b.Property<string>("EncodedKey")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("FileSize")
                        .HasColumnType("numeric(18, 5)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("OwnerKey")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Person", "AttachmentType")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AttachmentType");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Domain.Entities.AttachmentsTypes", b =>
                {
                    b.Property<int>("AttachmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("AttachmentTypeId");

                    b.ToTable("AttachmentsTypes");
                });

            modelBuilder.Entity("Domain.Entities.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.Cities", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("State");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.ClientsStatus", b =>
                {
                    b.Property<int>("ClientStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ClientStatusId");

                    b.ToTable("ClientsStatus");
                });

            modelBuilder.Entity("Domain.Entities.Countries", b =>
                {
                    b.Property<string>("CountryIsoCode")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int>("CountryIsoNumb")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("FormattingRoutineKeyForPrintingAddresses")
                        .HasColumnType("int");

                    b.Property<string>("IsoCountryName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("LanguageKey")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OfficialStateName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PostalCodeLength")
                        .HasColumnType("int");

                    b.Property<string>("PrincipalCurrency")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<int?>("RuleForPostalCode")
                        .HasColumnType("int");

                    b.HasKey("CountryIsoCode");

                    b.HasIndex("FormattingRoutineKeyForPrintingAddresses");

                    b.HasIndex("LanguageKey");

                    b.HasIndex("PrincipalCurrency");

                    b.HasIndex("RuleForPostalCode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.Currencies", b =>
                {
                    b.Property<string>("IsoCode")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("IsoDecimal")
                        .HasColumnType("int");

                    b.Property<int>("IsoNumber")
                        .HasColumnType("int");

                    b.HasKey("IsoCode");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Domain.Entities.DocumentsTypes", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Typecode")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentsTypes");
                });

            modelBuilder.Entity("Domain.Entities.Emails", b =>
                {
                    b.Property<Guid>("Person")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(320)")
                        .HasMaxLength(320)
                        .IsUnicode(false);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Validated")
                        .HasColumnType("bit");

                    b.HasKey("Person", "EmailAddress")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Domain.Entities.FormattingRoutinesKeysForPrintingAddresses", b =>
                {
                    b.Property<int>("FormattingRoutineKeyForPrintingAddressesId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("FormattingRoutineKeyForPrintingAddressesId");

                    b.ToTable("FormattingRoutinesKeysForPrintingAddresses");
                });

            modelBuilder.Entity("Domain.Entities.Genders", b =>
                {
                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("GenderId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Domain.Entities.IdentificationsDocuments", b =>
                {
                    b.Property<int>("IdentificationDocumentType")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IssuingAuthority")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("IssuingDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("Person")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("IdentificationDocumentType", "DocumentNumber")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Person");

                    b.ToTable("IdentificationsDocuments");
                });

            modelBuilder.Entity("Domain.Entities.Incomes", b =>
                {
                    b.Property<Guid>("Person")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Currency")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(18, 5)");

                    b.Property<int?>("Periodicity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Person", "Company", "Currency", "Value")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Currency");

                    b.HasIndex("Periodicity");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Domain.Entities.LanguagesKeys", b =>
                {
                    b.Property<int>("LanguageKeyId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LanguageKeyId");

                    b.ToTable("LanguagesKeys");
                });

            modelBuilder.Entity("Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MaritalStatusId");

                    b.ToTable("MaritalStatus");
                });

            modelBuilder.Entity("Domain.Entities.NaturalPersons", b =>
                {
                    b.Property<Guid>("Person")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfDeath")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LastNamePrefix")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("Person")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Gender");

                    b.HasIndex("MaritalStatus");

                    b.HasIndex("Nationality");

                    b.ToTable("NaturalPersons");
                });

            modelBuilder.Entity("Domain.Entities.Periodicity", b =>
                {
                    b.Property<int>("PeriodicityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PeriodicityId");

                    b.ToTable("Periodicity");
                });

            modelBuilder.Entity("Domain.Entities.Persons", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<long>("PersonNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("PersonId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Category");

                    b.HasIndex("Status");

                    b.HasIndex("TransactionId")
                        .HasName("CIX_Persons_TransactionId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domain.Entities.Phones", b =>
                {
                    b.Property<Guid>("Person")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhoneType")
                        .HasColumnType("int");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CountryIsoCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Extension")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Person", "PhoneType")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CountryIsoCode");

                    b.HasIndex("PhoneType");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Domain.Entities.PhonesTypes", b =>
                {
                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("PhoneTypeId");

                    b.ToTable("PhonesTypes");
                });

            modelBuilder.Entity("Domain.Entities.Regions", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("RegionCode")
                        .HasColumnType("int");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.HasKey("RegionId");

                    b.HasIndex("Country");

                    b.HasIndex("RegionCode");

                    b.HasIndex("TimeZone");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Domain.Entities.RegionsCodes", b =>
                {
                    b.Property<int>("RegionCodeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RegionCodeId");

                    b.ToTable("RegionsCodes");
                });

            modelBuilder.Entity("Domain.Entities.Roles", b =>
                {
                    b.Property<Guid>("Person")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("Person", "RoleType")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("RoleType");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.RolesTypes", b =>
                {
                    b.Property<int>("RoleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("RoleTypeId");

                    b.ToTable("RolesTypes");
                });

            modelBuilder.Entity("Domain.Entities.RuleForPostalsCodes", b =>
                {
                    b.Property<int>("RuleForPostalCodeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RuleForPostalCodeId");

                    b.ToTable("RuleForPostalsCodes");
                });

            modelBuilder.Entity("Domain.Entities.States", b =>
                {
                    b.Property<int>("StatesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.Property<int>("StateCode")
                        .HasColumnType("int");

                    b.HasKey("StatesId");

                    b.HasIndex("Region");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Domain.Entities.StatusCodesAddresses", b =>
                {
                    b.Property<int>("StatusCodeAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("StatusCodeAddressId");

                    b.ToTable("StatusCodesAddresses");
                });

            modelBuilder.Entity("Domain.Entities.TimeZones", b =>
                {
                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.HasKey("TimeZoneId");

                    b.ToTable("TimeZones");
                });

            modelBuilder.Entity("Domain.Entities.Users", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(125)")
                        .HasMaxLength(125)
                        .IsUnicode(false);

                    b.Property<string>("Token")
                        .HasColumnType("varchar(125)")
                        .HasMaxLength(125)
                        .IsUnicode(false);

                    b.HasKey("UserId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.AddressesTypes", "AddressTypeNavigation")
                        .WithMany("Address")
                        .HasForeignKey("AddressType")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Cities", "CityNavigation")
                        .WithMany("Address")
                        .HasForeignKey("City");

                    b.HasOne("Domain.Entities.Persons", "PersonNavigation")
                        .WithMany("Address")
                        .HasForeignKey("Person")
                        .IsRequired();

                    b.HasOne("Domain.Entities.StatusCodesAddresses", "StatusCodeAddressNavigation")
                        .WithMany("Address")
                        .HasForeignKey("StatusCodeAddress");
                });

            modelBuilder.Entity("Domain.Entities.Attachments", b =>
                {
                    b.HasOne("Domain.Entities.AttachmentsTypes", "AttachmentTypeNavigation")
                        .WithMany("Attachments")
                        .HasForeignKey("AttachmentType")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persons", "PersonNavigation")
                        .WithMany("Attachments")
                        .HasForeignKey("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Cities", b =>
                {
                    b.HasOne("Domain.Entities.States", "StateNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("State")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Countries", b =>
                {
                    b.HasOne("Domain.Entities.FormattingRoutinesKeysForPrintingAddresses", "FormattingRoutineKeyForPrintingAddressesNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("FormattingRoutineKeyForPrintingAddresses")
                        .HasConstraintName("FK_Countries_FormattingRoutinesKeysForPrintingAddresses_FormattinRoutineKeyForPrintingAddresses");

                    b.HasOne("Domain.Entities.LanguagesKeys", "LanguageKeyNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("LanguageKey")
                        .HasConstraintName("FK_Countries_LanguagesKeys_LanguajeKey");

                    b.HasOne("Domain.Entities.Currencies", "PrincipalCurrencyNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("PrincipalCurrency")
                        .IsRequired();

                    b.HasOne("Domain.Entities.RuleForPostalsCodes", "RuleForPostalCodeNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("RuleForPostalCode");
                });

            modelBuilder.Entity("Domain.Entities.Emails", b =>
                {
                    b.HasOne("Domain.Entities.Persons", "PersonNavigation")
                        .WithMany("Emails")
                        .HasForeignKey("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.IdentificationsDocuments", b =>
                {
                    b.HasOne("Domain.Entities.DocumentsTypes", "IdentificationDocumentTypeNavigation")
                        .WithMany("IdentificationsDocuments")
                        .HasForeignKey("IdentificationDocumentType")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persons", "PersonNavigation")
                        .WithMany("IdentificationsDocuments")
                        .HasForeignKey("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Incomes", b =>
                {
                    b.HasOne("Domain.Entities.Currencies", "CurrencyNavigation")
                        .WithMany("Incomes")
                        .HasForeignKey("Currency")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Periodicity", "PeriodicityNavigation")
                        .WithMany("Incomes")
                        .HasForeignKey("Periodicity")
                        .HasConstraintName("FK_Incomes_Periodicities_Periodicity");

                    b.HasOne("Domain.Entities.Persons", "PersonNavigation")
                        .WithMany("Incomes")
                        .HasForeignKey("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.NaturalPersons", b =>
                {
                    b.HasOne("Domain.Entities.Genders", "GenderNavigation")
                        .WithMany("NaturalPersons")
                        .HasForeignKey("Gender")
                        .IsRequired();

                    b.HasOne("Domain.Entities.MaritalStatus", "MaritalStatusNavigation")
                        .WithMany("NaturalPersons")
                        .HasForeignKey("MaritalStatus");

                    b.HasOne("Domain.Entities.Countries", "NationalityNavigation")
                        .WithMany("NaturalPersons")
                        .HasForeignKey("Nationality")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persons", "PersonNavigation")
                        .WithOne("NaturalPersons")
                        .HasForeignKey("Domain.Entities.NaturalPersons", "Person")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Persons", b =>
                {
                    b.HasOne("Domain.Entities.Categories", "CategoryNavigation")
                        .WithMany("Persons")
                        .HasForeignKey("Category")
                        .IsRequired();

                    b.HasOne("Domain.Entities.ClientsStatus", "StatusNavigation")
                        .WithMany("Persons")
                        .HasForeignKey("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Phones", b =>
                {
                    b.HasOne("Domain.Entities.Countries", "CountryIsoCodeNavigation")
                        .WithMany("Phones")
                        .HasForeignKey("CountryIsoCode")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persons", "PersonNavigation")
                        .WithMany("Phones")
                        .HasForeignKey("Person")
                        .IsRequired();

                    b.HasOne("Domain.Entities.PhonesTypes", "PhoneTypeNavigation")
                        .WithMany("Phones")
                        .HasForeignKey("PhoneType")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Regions", b =>
                {
                    b.HasOne("Domain.Entities.Countries", "CountryNavigation")
                        .WithMany("Regions")
                        .HasForeignKey("Country")
                        .IsRequired();

                    b.HasOne("Domain.Entities.RegionsCodes", "RegionCodeNavigation")
                        .WithMany("Regions")
                        .HasForeignKey("RegionCode")
                        .IsRequired();

                    b.HasOne("Domain.Entities.TimeZones", "TimeZoneNavigation")
                        .WithMany("Regions")
                        .HasForeignKey("TimeZone")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Roles", b =>
                {
                    b.HasOne("Domain.Entities.Persons", "PersonNavigation")
                        .WithMany("Roles")
                        .HasForeignKey("Person")
                        .IsRequired();

                    b.HasOne("Domain.Entities.RolesTypes", "RoleTypeNavigation")
                        .WithMany("Roles")
                        .HasForeignKey("RoleType")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.States", b =>
                {
                    b.HasOne("Domain.Entities.Regions", "RegionNavigation")
                        .WithMany("States")
                        .HasForeignKey("Region")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
